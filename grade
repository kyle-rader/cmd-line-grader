#!/usr/bin/env bash

################################################################################
#
#                               Command Line Speed Grader
# Author       : Kyle Rader, WWU CS Graduate Teaching Assistant
# Created      : 28 Feb 2015
# Last Modified: 16 March 2015
#
# Description : This is a generic command line speed grader program
#                for compiling, testing, and reviewing Java
#                assignments from CSCI 145 - WWU CS.
################################################################################

set -e

remove='_*'
cd subs/

# This RAW Java file setup should not be required normally and will be removed
# in the future

# Setup people's raw java files
files=( "*.java" )
for file in ${files[@]} ; do

    # CHeck for non expanded match
    [[ "$file" = '*.java' ]] && [[ ! -e '*.java' ]] && continue

    student=${file%%$remove}

    mkdir -p $student
    mv $file $student/
done

# Setup zip files
zips=( "*.zip" )
for zip in ${zips[@]} ; do

    # Check for nonexpanded match
    [[ "$zip" = '*.zip' ]] && [[ ! -e '*.txt' ]] && continue

    student=${zip%%$remove}
    zipNoSpace=${zip// /_}

    # Get rid of spaces in the zip folder name
    if [ "$zip" != "$zipNoSpace" ] ; then
  mv -f $student*.zip $zipNoSpace
    fi

    mkdir -p $student
    mv $zipNoSpace $student/orig.zip
    cd $student
    unzip orig.zip > /dev/null

    # Get MAC folder outa here
    rm -rf __MACOSX

    # find java files if there is another directory in here
    if [ "$(find -not -name . -type d | wc -l)" -ne "0" ]; then
  find -name '*.java' -exec mv {} ./ \;
  find -type d -not -name . -prune -exec rm -rf {} \;
    fi

    cd ../
done

echo "-- Setup done.  Ready to grade $(find -maxdepth 1 -type d -not -name . | wc -l) students. --"
echo
students=( "$(find -maxdepth 1 -type d -not -name .)" )
echo $students
i=0
for student in ${students[@]}; do

    echo "Setting up: $student :"

    cd $student

    # Fix java file names and class names
    ../../fix_file_names "OrigBookCollection.java" ".*BookCol.*\.java" "BookCollection.java" 's/class.*\n?{/class BookCollection {/'

    # Copy any common files into the student's directory.
    cp ../../common/* ./

    echo "Compiling code..."
    # Ready to compile expected files and run tests.
    if [ -f BookCollection.java ]; then
  javac Book.java
  javac BookCollection.java &> compile-log.txt || :
    fi

    if [ -e BookCollection.class ]; then
  javac BookStuff.java
  timeout 2 java BookStuff List1.txt Change1.txt List2.txt Change2.txt 2> err.txt > out.txt || :
    else
  echo 'Failed to compile'
    fi

#    if [ -f Hanoi.java ]; then
#  javac Hanoi.java &> Hanoi.err.txt || :
#    fi
#    if [ -f Fibonacci.java ]; then
#  javac Fibonacci.java &> Fibonacci.err.txt || :
#    fi

    # Test Fibonacci
#    echo "Testing ... "
#    if [ -e Fibonacci.class ]; then
#
#  printf "No Args: %s\n" "$(timeout -k 2 2 java Fibonacci 2>> Fibonacci.err.txt)" >> Fibonacci.out.txt
#  printf "Bad Arg: %s\n" "$(timeout -k 2 2 java Fibonacci five 2>> Fibonacci.err.txt)" >> Fibonacci.out.txt
#  for (( i=0 ; i < 10 ; i++ )); do
#      printf "i = $i : %s\n\n" "$(timeout -k 2 2 echo $i | java Fibonacci $i 2>> Fibonacci.err.txt)" >> Fibonacci.out.txt
#  done
#  echo " Fibonacci done... "

#    fi


    # Test Hanoi
#    if [ -e Hanoi.class ]; then
#
#  printf "No Args: %s\n" "$(timeout -k 2 2 java Hanoi 2>> Hanoi.err.txt)" >> Hanoi.out.txt
#  printf "Bad Arg: %s\n" "$(timeout -k 2 2 java Hanoi five 2>> Hanoi.err.txt)" >> Hanoi.out.txt
#  for (( i=1 ; i < 4 ; i++ )); do
#      printf "i = $i :\n%s\n\n" "$(timeout -k 2 2 echo $i | java Hanoi $i 2>> Hanoi.err.txt)" >> Hanoi.out.txt
#  done
#  echo " Hanoi done..."

#    fi
    echo
    i=$[$i + 1]
    cd ../
done
echo "Graded $i students"

echo
echo "-- Grading Complete --"
